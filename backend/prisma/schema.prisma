generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model aeronave {
  id_aeronave           Int                     @id @default(autoincrement())
  modelo                String                  @db.VarChar(100)
  capacidad             Int
  asiento               asiento[]
  vuelo                 vuelo[]
  configuracion_asientos configuracion_asientos[]
}

model aeropuerto {
  id_aeropuerto                                   Int     @id @default(autoincrement())
  id_ciudadFK                                     Int
  nombre                                          String  @db.VarChar(100)
  codigo_iata                                     String  @db.VarChar(100)
  ciudad                                          ciudad  @relation(fields: [id_ciudadFK], references: [id_ciudad], onDelete: NoAction, onUpdate: NoAction, map: "aeropuerto_ibfk_1")
  vuelo_vuelo_id_aeropuerto_origenFKToaeropuerto  vuelo[] @relation("vuelo_id_aeropuerto_origenFKToaeropuerto")
  vuelo_vuelo_id_aeropuerto_destinoFKToaeropuerto vuelo[] @relation("vuelo_id_aeropuerto_destinoFKToaeropuerto")

  @@index([id_ciudadFK], map: "id_ciudadFK")
}

model asiento {
  id_asiento    Int            @id @default(autoincrement())
  id_aeronaveFK Int
  numero        String         @db.VarChar(100)
  clases        asiento_clases
  aeronave      aeronave       @relation(fields: [id_aeronaveFK], references: [id_aeronave], onDelete: NoAction, onUpdate: NoAction, map: "asiento_ibfk_1")
  ticket        ticket[]

  @@index([id_aeronaveFK], map: "id_aeronaveFK")
}

model configuracion_asientos {
  id_configuracion Int            @id @default(autoincrement())
  id_aeronaveFK    Int
  clase            asiento_clases
  cantidad         Int

  aeronave aeronave @relation(fields: [id_aeronaveFK], references: [id_aeronave], onDelete: NoAction, onUpdate: NoAction)

  @@index([id_aeronaveFK], map: "id_aeronaveFK")
}

model tarifa {
  id_tarifa    Int            @id @default(autoincrement())
  id_vueloFK   Int
  clase        asiento_clases
  precio_base  Float          @db.Float

  vuelo vuelo @relation(fields: [id_vueloFK], references: [id_vuelo], onDelete: NoAction, onUpdate: NoAction)

  @@index([id_vueloFK], map: "id_vueloFK")
}

model ciudad {
  id_ciudad  Int          @id @default(autoincrement())
  id_paisFK  Int
  id_gmtFK   Int
  nombre     String       @db.VarChar(100)
  codigo     String       @db.VarChar(100)
  aeropuerto aeropuerto[]
  pais       pais         @relation(fields: [id_paisFK], references: [id_pais], onDelete: NoAction, onUpdate: NoAction, map: "ciudad_ibfk_1")
  gmt        gmt          @relation(fields: [id_gmtFK], references: [id_gmt], onDelete: NoAction, onUpdate: NoAction)

  @@index([id_paisFK], map: "id_paisFK")
  @@index([id_gmtFK], map: "id_gmtFK")
}

model pago {
  id_pago      Int         @id @default(autoincrement())
  id_ticketFK  Int
  id_tarjetaFK Int
  monto        Float       @db.Float
  fecha        DateTime    @db.DateTime(0)
  estado       pago_estado
  ticket       ticket      @relation(fields: [id_ticketFK], references: [id_ticket], onDelete: NoAction, onUpdate: NoAction, map: "pago_ibfk_1")
  tarjeta      tarjeta     @relation(fields: [id_tarjetaFK], references: [id_tarjeta], onDelete: NoAction, onUpdate: NoAction, map: "pago_ibfk_2")

  @@index([id_tarjetaFK], map: "id_tarjetaFK")
  @@index([id_ticketFK], map: "id_ticketFK")
}

model pais {
  id_pais Int      @id @default(autoincrement())
  nombre  String   @db.VarChar(100)
  iso2    String   @db.VarChar(100)
  ciudad  ciudad[]
}

model pasajero {
  id_pasajero      Int             @id @default(autoincrement())
  id_ticketFK      Int
  nombre           String          @db.VarChar(255)
  apellido         String          @db.VarChar(255)
  dni              String          @db.VarChar(255)
  genero           pasajero_genero
  fecha_nacimiento DateTime        @db.Date
  ticket           ticket          @relation(fields: [id_ticketFK], references: [id_ticket], onDelete: NoAction, onUpdate: NoAction, map: "pasajero_ibfk_1")

  @@index([id_ticketFK], map: "id_ticketFK")
}

model promocion {
  id_promocion  Int      @id @default(autoincrement())
  nombre        String   @db.VarChar(255)
  descripcion   String   @db.VarChar(255)
  descuento Float    @db.Float
  fecha_inicio  DateTime @db.DateTime(0)
  fecha_fin     DateTime @db.DateTime(0)
  vuelo         vuelo[]
}

model tarjeta {
  id_tarjeta   Int          @id @default(autoincrement())
  id_usuarioFK Int
  saldo        Float    @db.Float
  titular      String       @db.VarChar(255)
  vence_mes    Int
  vence_anio   Int
  cvv_ene      String       @db.VarChar(255)
  tipo         tarjeta_tipo
  banco        String       @db.VarChar(255)
  creado_en    DateTime     @db.DateTime(0)
  pago         pago[]
  usuario      usuario      @relation(fields: [id_usuarioFK], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "tarjeta_ibfk_1")

  @@index([id_usuarioFK], map: "id_usuarioFK")
}

model ticket {
  id_ticket    Int           @id @default(autoincrement())
  id_usuarioFK Int
  id_vueloFK   Int
  id_asientoFK Int
  precio       Float         @db.Float
  estado       ticket_estado
  creado_en    DateTime      @db.DateTime(0)
  pago         pago[]
  pasajero     pasajero[]
  usuario      usuario       @relation(fields: [id_usuarioFK], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "ticket_ibfk_1")
  vuelo        vuelo         @relation(fields: [id_vueloFK], references: [id_vuelo], onDelete: NoAction, onUpdate: NoAction, map: "ticket_ibfk_2")
  asiento      asiento       @relation(fields: [id_asientoFK], references: [id_asiento], onDelete: NoAction, onUpdate: NoAction, map: "ticket_ibfk_3")

  @@index([id_asientoFK], map: "id_asientoFK")
  @@index([id_usuarioFK], map: "id_usuarioFK")
  @@index([id_vueloFK], map: "id_vueloFK")
}

model usuario {
  id_usuario            Int                  @id @default(autoincrement())
  tipo_usuario          usuario_tipo_usuario
  dni                   String               @unique @db.VarChar(255)
  nombre                String               @db.VarChar(255)
  apellido              String               @db.VarChar(255)
  fecha_nacimiento      DateTime             @db.Date
  nacionalidad          nationalities
  direccion_facturacion String               @db.VarChar(255)
  genero                usuario_genero
  correo                String               @unique @db.VarChar(255)
  username              String               @unique @db.VarChar(255)
  password_bash         String               @db.VarChar(255)
  img_url               String               @db.VarChar(255)
  suscrito_noticias     Boolean              @default(false)
  creado_en             DateTime             @db.DateTime(0)
  must_change_password  Boolean              @default(false)
  tarjeta               tarjeta[]
  ticket                ticket[]
}

model vuelo {
  id_vuelo                Int @id @default(autoincrement())
  id_aeronaveFK           Int
  id_aeropuerto_origenFK  Int
  id_aeropuerto_destinoFK Int

  salida_programada_utc  DateTime @db.Timestamp(0)
  llegada_programada_utc DateTime @db.Timestamp(0)

  id_promocionFK Int?
  promocion      promocion? @relation(fields: [id_promocionFK], references: [id_promocion], onDelete: NoAction, onUpdate: NoAction)

  estado                                               vuelo_estado @default(Programado)
  ticket                                               ticket[]
  tarifa                                               tarifa[]
  aeronave                                             aeronave     @relation(fields: [id_aeronaveFK], references: [id_aeronave], onDelete: NoAction, onUpdate: NoAction, map: "vuelo_ibfk_1")
  aeropuerto_vuelo_id_aeropuerto_origenFKToaeropuerto  aeropuerto   @relation("vuelo_id_aeropuerto_origenFKToaeropuerto", fields: [id_aeropuerto_origenFK], references: [id_aeropuerto], onDelete: NoAction, onUpdate: NoAction, map: "vuelo_ibfk_2")
  aeropuerto_vuelo_id_aeropuerto_destinoFKToaeropuerto aeropuerto   @relation("vuelo_id_aeropuerto_destinoFKToaeropuerto", fields: [id_aeropuerto_destinoFK], references: [id_aeropuerto], onDelete: NoAction, onUpdate: NoAction, map: "vuelo_ibfk_3")
  noticia                                              noticia?

  @@index([id_aeronaveFK], map: "id_aeronaveFK")
  @@index([id_aeropuerto_destinoFK], map: "id_aeropuerto_destinoFK")
  @@index([id_aeropuerto_origenFK], map: "id_aeropuerto_origenFK")
  @@index([id_promocionFK], map: "id_promocionFK")
}

model noticia {
  id_noticia        Int    @id @default(autoincrement())
  id_vueloFK        Int    @unique
  titulo            String @db.VarChar(255)
  descripcion_corta String @db.VarChar(512)
  descripcion_larga String @db.Text
  url_imagen        String @db.VarChar(255)

  vuelo vuelo @relation(fields: [id_vueloFK], references: [id_vuelo], onDelete: NoAction, onUpdate: NoAction)

  @@index([id_vueloFK], map: "id_vueloFK")
}

model gmt {
  id_gmt Int      @id @default(autoincrement())
  name   String   @db.VarChar(20)                 // ejemplo: "GMT-5", "GMT+2"
  offset Int                                     // -12 .. +12
  ciudad ciudad[]
}

enum usuario_tipo_usuario {
  root
  admin
  cliente
}

enum asiento_clases {
  economica
  primera_clase @map("primera clase")
}

enum pago_estado {
  pendiente
  aprobado
  rechazado
}

enum ticket_estado {
  reservado
  pagado
  checkin
  usado
  cancelado
}

enum pasajero_genero {
  M
  F
  X
}

enum tarjeta_tipo {
  credito
  debito
}

enum vuelo_estado {
  Programado
  En_vuelo   @map("En vuelo")
  Aterrizado
  Cancelado
  Retrasado
}

enum usuario_genero {
  M
  F
  X
}

enum nationalities {
  Afghanistan
  Albania
  Algeria
  Andorra
  Angola
  AntiguaAndBarbuda
  Argentina
  Armenia
  Australia
  Austria
  Azerbaijan
  Bahamas
  Bahrain
  Bangladesh
  Barbados
  Belarus
  Belgium
  Belize
  Benin
  Bhutan
  Bolivia
  BosniaAndHerzegovina
  Botswana
  Brazil
  Brunei
  Bulgaria
  BurkinaFaso
  Burundi
  Cambodia
  Cameroon
  Canada
  CapeVerde
  CentralAfricanRepublic
  Chad
  Chile
  China
  Colombia
  Comoros
  Congo
  CostaRica
  Croatia
  Cuba
  Cyprus
  CzechRepublic
  Denmark
  Djibouti
  Dominica
  DominicanRepublic
  Ecuador
  Egypt
  ElSalvador
  EquatorialGuinea
  Eritrea
  Estonia
  Eswatini
  Ethiopia
  Fiji
  Finland
  France
  Gabon
  Gambia
  Georgia
  Germany
  Ghana
  Greece
  Grenada
  Guatemala
  Guinea
  GuineaBissau
  Guyana
  Haiti
  Honduras
  Hungary
  Iceland
  India
  Indonesia
  Iran
  Iraq
  Ireland
  Israel
  Italy
  IvoryCoast
  Jamaica
  Japan
  Jordan
  Kazakhstan
  Kenya
  Kiribati
  Kuwait
  Kyrgyzstan
  Laos
  Latvia
  Lebanon
  Lesotho
  Liberia
  Libya
  Liechtenstein
  Lithuania
  Luxembourg
  Madagascar
  Malawi
  Malaysia
  Maldives
  Mali
  Malta
  MarshallIslands
  Mauritania
  Mauritius
  Mexico
  Micronesia
  Moldova
  Monaco
  Mongolia
  Montenegro
  Morocco
  Mozambique
  Myanmar
  Namibia
  Nauru
  Nepal
  Netherlands
  NewZealand
  Nicaragua
  Niger
  Nigeria
  NorthKorea
  NorthMacedonia
  Norway
  Oman
  Pakistan
  Palau
  Panama
  PapuaNewGuinea
  Paraguay
  Peru
  Philippines
  Poland
  Portugal
  Qatar
  Romania
  Russia
  Rwanda
  SaintKittsAndNevis
  SaintLucia
  SaintVincentAndGrenadines
  Samoa
  SanMarino
  SaoTomeAndPrincipe
  SaudiArabia
  Senegal
  Serbia
  Seychelles
  SierraLeone
  Singapore
  Slovakia
  Slovenia
  SolomonIslands
  Somalia
  SouthAfrica
  SouthKorea
  SouthSudan
  Spain
  SriLanka
  Sudan
  Suriname
  Sweden
  Switzerland
  Syria
  Taiwan
  Tajikistan
  Tanzania
  Thailand
  TimorLeste
  Togo
  Tonga
  TrinidadAndTobago
  Tunisia
  Turkey
  Turkmenistan
  Tuvalu
  Uganda
  Ukraine
  UnitedArabEmirates
  UnitedKingdom
  UnitedStates
  Uruguay
  Uzbekistan
  Vanuatu
  VaticanCity
  Venezuela
  Vietnam
  Yemen
  Zambia
  Zimbabwe
}